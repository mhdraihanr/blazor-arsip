@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var absoluteUri = Navigation.Uri;
            var relativePath = Navigation.ToBaseRelativePath(absoluteUri);

            // Check if already on login page to avoid loops
            if (!relativePath.StartsWith("login", StringComparison.OrdinalIgnoreCase) &&
                !relativePath.StartsWith("register", StringComparison.OrdinalIgnoreCase))
            {
                var returnUrl = Uri.EscapeDataString(relativePath);
                var loginUrl = string.IsNullOrEmpty(returnUrl) || returnUrl == "%2F" ? "/login" : $"/login?returnUrl={returnUrl}";
                
                // Use JavaScript to do a clean redirect
                await JSRuntime.InvokeVoidAsync("eval", $"window.location.href = '{loginUrl}';");
            }
        }
    }
}

<div class="d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="text-center">
        <div class="spinner-border text-primary mb-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Redirecting to login...</p>
    </div>
</div>
