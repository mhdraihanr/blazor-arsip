@if (IsVisible)
{
    <div class="confirmation-overlay" @onclick="HandleOverlayClick">
        <div class="confirmation-dialog" @onclick:stopPropagation="true">
            <div class="confirmation-header">
                <div class="confirmation-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h4 class="confirmation-title">@Title</h4>
            </div>
            
            <div class="confirmation-body">
                <p class="confirmation-message">@Message</p>
                @if (!string.IsNullOrEmpty(Details))
                {
                    <div class="confirmation-details">
                        @Details
                    </div>
                }
            </div>
            
            <div class="confirmation-footer">
                <button type="button" 
                        class="btn btn-secondary confirmation-btn-cancel" 
                        @onclick="HandleCancel"
                        disabled="@IsProcessing">
                    <i class="fas fa-times"></i>
                    @CancelText
                </button>
                <button type="button" 
                        class="btn btn-danger confirmation-btn-confirm" 
                        @onclick="HandleConfirm"
                        disabled="@IsProcessing">
                    @if (IsProcessing)
                    {
                        <i class="fas fa-spinner fa-spin"></i>
                    }
                    else
                    {
                        <i class="fas fa-check"></i>
                    }
                    @ConfirmText
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; } = "Konfirmasi";
    [Parameter] public string Message { get; set; } = "Apakah Anda yakin?";
    [Parameter] public string? Details { get; set; }
    [Parameter] public string ConfirmText { get; set; } = "Ya";
    [Parameter] public string CancelText { get; set; } = "Batal";
    [Parameter] public bool IsProcessing { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool CloseOnOverlayClick { get; set; } = true;

    private TaskCompletionSource<bool>? _taskCompletionSource;

    public async Task<bool> ShowAsync(string title, string message, string confirmText = "Ya", string cancelText = "Batal")
    {
        Title = title;
        Message = message;
        ConfirmText = confirmText;
        CancelText = cancelText;
        IsVisible = true;
        IsProcessing = false;
        
        _taskCompletionSource = new TaskCompletionSource<bool>();
        StateHasChanged();
        
        return await _taskCompletionSource.Task;
    }

    private async Task HandleConfirm()
    {
        if (!IsProcessing)
        {
            IsVisible = false;
            _taskCompletionSource?.SetResult(true);
            await OnConfirm.InvokeAsync();
            StateHasChanged();
        }
    }

    private async Task HandleCancel()
    {
        if (!IsProcessing)
        {
            IsVisible = false;
            _taskCompletionSource?.SetResult(false);
            await OnCancel.InvokeAsync();
            StateHasChanged();
        }
    }

    private async Task HandleOverlayClick()
    {
        if (CloseOnOverlayClick && !IsProcessing)
        {
            await HandleCancel();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsVisible)
        {
            // Add escape key listener
            await Task.CompletedTask;
        }
    }
}