@page "/logout"
@layout LoginLayout
@using System.Net.Http.Json
@using blazor_arsip.Services
@using Microsoft.AspNetCore.Components.Authorization
@using blazor_arsip.Components.Layout
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Logout> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="text-center">
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Logging out...</span>
    </div>
    <p class="mt-2">Logging out...</p>
</div>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PerformLogout();
        }
    }
    
    private async Task PerformLogout()
    {
        try
        {
            Logger.LogInformation("Starting logout process");
            
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);
            
            // Include cookies in the request
            httpClient.DefaultRequestHeaders.Add("Cookie", NavigationManager.Uri);
            
            var response = await httpClient.PostAsync("/Account/Logout", null);
            
            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Logout API call successful");
            }
            else
            {
                Logger.LogWarning("Logout API call failed with status: {StatusCode}", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during logout API call");
        }
        
        try
        {
            // Notify authentication state change
            // AuthStateProvider.RefreshAuthenticationState(); // Removed as not available in standard provider
            
            // Clear any client-side storage and cookies
            await JSRuntime.InvokeVoidAsync("eval", @"
                localStorage.clear(); 
                sessionStorage.clear();
                // Clear all cookies
                document.cookie.split(';').forEach(function(c) { 
                    document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/'); 
                });
            ");
            
            // Small delay to ensure everything is cleared
            await Task.Delay(200);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing client state");
        }
        
        // Force navigation to login page with full page reload
        await JSRuntime.InvokeVoidAsync("eval", $"window.location.replace('{NavigationManager.BaseUri}login');");
    }
}
