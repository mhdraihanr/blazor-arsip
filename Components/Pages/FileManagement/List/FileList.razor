@page "/list"
@using blazor_arsip.Services
@using blazor_arsip.Models
@using blazor_arsip.Components.Pages.FileManagement.List
@using blazor_arsip.Components.Shared
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveServer
@inherits FileListBase

<PageTitle>File List - Arsip Digital</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 text-gray-800">
                        <i class="fas fa-list me-2"></i>File List
                    </h1>
                    <p class="text-muted">Browse, search, and manage your files</p>
                </div>
                <a href="/upload" class="btn btn-primary">
                    <i class="fas fa-upload me-2"></i>Upload New File
                </a>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="card shadow mb-3">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-filter me-2"></i>Search & Filter
            </h6>
        </div>
        <div class="card-body py-3">
            <div class="row">
                <div class="col-md-3">
                    <label for="searchTerm" class="form-label">Search Files</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="searchTerm" @bind="viewModel.SearchTerm" @onkeypress="viewModel.OnSearchKeyPressAsync" placeholder="Search by filename, description, or tags...">
                        <button class="btn btn-outline-secondary" type="button" @onclick="viewModel.SearchFilesAsync">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
                <div class="col-md-2 mb-2">
                    <label for="categoryFilter" class="form-label">Category</label>
                    <select class="form-select" id="categoryFilter" @bind="viewModel.SelectedCategory" @bind:event="onchange">
                        <option value="">All Categories</option>
                        @foreach (var category in viewModel.Categories)
                        {
                            <option value="@category.Name">@category.Name</option>
                        }
                    </select>
                </div>
                <div class="col-md-2 mb-2">
                    <label for="fromDate" class="form-label">From Date</label>
                    <input type="date" class="form-control" id="fromDate" @bind="viewModel.FromDate" @bind:event="onchange">
                </div>
                <div class="col-md-2 mb-2">
                    <label for="toDate" class="form-label">To Date</label>
                    <input type="date" class="form-control" id="toDate" @bind="viewModel.ToDate" @bind:event="onchange">
                </div>
                <div class="col-md-3">
                    <label class="form-label invisible">Actions</label>
                    <div class="d-flex">
                        <button class="btn btn-primary btn-sm me-2" @onclick="viewModel.SearchFilesAsync">
                            <i class="fas fa-search me-2"></i>Search
                        </button>
                        <button class="btn btn-secondary btn-sm me-3" @onclick="viewModel.ClearFiltersAsync">
                            <i class="fas fa-times me-2"></i>Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div class="card shadow mb-3">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Files (@viewModel.FilteredFiles.Count() results)</h6>
            <div class="d-flex align-items-center gap-3">
                <div class="d-flex align-items-center">
                    <label class="me-2">Items per page:</label>
                    <select class="form-select" style="width: auto;" @bind="viewModel.PageSize">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
                <div class="d-flex align-items-center">
                    <label class="me-2">View:</label>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary btn-sm @(viewModel.IsGridView ? "active" : "")" @onclick="() => viewModel.SetViewMode(true)">
                            <i class="fas fa-th me-1"></i>Grid
                        </button>
                        <button type="button" class="btn btn-outline-primary btn-sm @(!viewModel.IsGridView ? "active" : "")" @onclick="() => viewModel.SetViewMode(false)">
                            <i class="fas fa-list me-1"></i>List
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (viewModel.IsLoading)
            {
                <div class="d-flex justify-content-center py-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!viewModel.FilteredFiles.Any())
            {
                <div class="text-center py-4">
                    <i class="fas fa-folder-open fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No files found</h5>
                    <p class="text-muted">Try adjusting your search criteria or upload some files.</p>
                    <a href="/upload" class="btn btn-primary">
                        <i class="fas fa-upload me-2"></i>Upload Files
                    </a>
                </div>
            }
            else
            {
                @if (viewModel.IsGridView)
                {
                    <!-- Grid View -->
                    <div class="row">
                        @foreach (var file in viewModel.FilteredFiles.Skip((viewModel.CurrentPage - 1) * viewModel.PageSize).Take(viewModel.PageSize))
                        {
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 mb-3">
                                <div class="card h-100 file-card" style="cursor: pointer;" @onclick="() => viewModel.ViewFile(file.Id)" @onclick:preventDefault="false">
                                    <div class="card-body text-center p-3">
                                        <div class="file-icon mb-2">
                                            <i class="@FileListViewModel.GetFileIcon(file.FileExtension)"></i>
                                        </div>
                                        <h6 class="card-title mb-1" title="@file.OriginalFileName">@FileListViewModel.TruncateFileName(file.OriginalFileName, 18)</h6>
                                        <p class="card-text text-muted mb-1">@FileListViewModel.FormatFileSize(file.FileSize)</p>
                                        <p class="card-text text-muted">@file.UploadedAt.ToString("MMM dd, yyyy")</p>
                                    </div>
                                    <div class="card-footer p-2">
                                        <div class="btn-group w-100" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick:stopPropagation="true" @onclick="() => viewModel.DownloadFileAsync(file.Id)" title="Download">
                                                <i class="fas fa-download"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick:stopPropagation="true" @onclick="() => viewModel.EditFile(file.Id)" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick:stopPropagation="true" @onclick="() => viewModel.DeleteFileAsync(file.Id, confirmationDialog)" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <!-- List View -->
                    <div class="table-responsive">
                        <QuickGrid Items="@viewModel.FilteredFiles.Skip((viewModel.CurrentPage - 1) * viewModel.PageSize).Take(viewModel.PageSize).AsQueryable()" Class="table table-striped table-hover table-sm list-table responsive-table">
                            <TemplateColumn Title="" Class="text-center ">
                                <ChildContent>
                                    <div class="file-icon-small">
                                        <i class="@FileListViewModel.GetFileIcon(context.FileExtension)"></i>
                                    </div>
                                </ChildContent>
                            </TemplateColumn>
                            <TemplateColumn Title="File Name" Sortable="true" SortBy="@(GridSort<FileRecord>.ByAscending(f => f.OriginalFileName))">
                                <ChildContent>
                                    <div class="d-flex flex-column">
                                        <span class="fw-medium text-primary file-name-text" style="cursor: pointer;" title="@context.OriginalFileName" @onclick="() => viewModel.ViewFile(context.Id)">@context.OriginalFileName</span>
                                        <small class="text-muted">@context.FileExtension.ToUpper()</small>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input placeholder="Filter by name..." @bind="viewModel.NameFilter" @bind:event="oninput" class="form-control form-control-sm" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>
                            <TemplateColumn Title="Category" Sortable="true" SortBy="@(GridSort<FileRecord>.ByAscending(f => f.Category))">
                                <ChildContent>
                                    <span class="badge bg-primary">@context.Category</span>
                                </ChildContent>
                            </TemplateColumn>
                            <TemplateColumn Title="Size" Sortable="true" SortBy="@(GridSort<FileRecord>.ByAscending(f => f.FileSize))">
                                <ChildContent>
                                    <span class="text-muted">@FileListViewModel.FormatFileSize(context.FileSize)</span>
                                </ChildContent>
                            </TemplateColumn>
                            <TemplateColumn Title="Uploaded By" Sortable="true" SortBy="@(GridSort<FileRecord>.ByAscending(f => f.UploadedBy))">
                                <ChildContent>
                                    <span>@context.UploadedBy</span>
                                </ChildContent>
                            </TemplateColumn>
                            <TemplateColumn Title="Upload Date" Sortable="true" SortBy="@(GridSort<FileRecord>.ByAscending(f => f.UploadedAt))">
                                <ChildContent>
                                    <div class="d-flex flex-column">
                                        <span>@context.UploadedAt.ToString("MMM dd, yyyy")</span>
                                        <small class="text-muted">@context.UploadedAt.ToString("HH:mm")</small>
                                    </div>
                                </ChildContent>
                            </TemplateColumn>
                            <TemplateColumn Title="Actions">
                                <ChildContent>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-primary" @onclick:stopPropagation="true" @onclick="() => viewModel.DownloadFileAsync(context.Id)" title="Download">
                                            <i class="fas fa-download"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" @onclick:stopPropagation="true" @onclick="() => viewModel.EditFile(context.Id)" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick:stopPropagation="true" @onclick="() => viewModel.DeleteFileAsync(context.Id, confirmationDialog)" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </ChildContent>
                            </TemplateColumn>
                        </QuickGrid>
                    </div>
                }

                <!-- Pagination -->
                @if (viewModel.TotalPages > 1)
                {
                    <nav aria-label="File list pagination" class="mt-3">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(viewModel.CurrentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => viewModel.ChangePage(viewModel.CurrentPage - 1)" disabled="@(viewModel.CurrentPage == 1)">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                            </li>
                            @for (int i = Math.Max(1, viewModel.CurrentPage - 2); i <= Math.Min(viewModel.TotalPages, viewModel.CurrentPage + 2); i++)
                            {
                                <li class="page-item @(i == viewModel.CurrentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => viewModel.ChangePage(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(viewModel.CurrentPage == viewModel.TotalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => viewModel.ChangePage(viewModel.CurrentPage + 1)" disabled="@(viewModel.CurrentPage == viewModel.TotalPages)">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>

<!-- Confirmation Dialog -->
<ConfirmationDialog @ref="confirmationDialog" />
<ToastContainer />

@code {
    // Component logic is now handled in FileListBase.cs
}