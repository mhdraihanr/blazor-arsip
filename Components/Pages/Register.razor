@page "/register"
@using blazor_arsip.Models
@using blazor_arsip.Services
@using blazor_arsip.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject IAuthenticationService AuthService
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Register - Blazor Arsip</PageTitle>

<div class="min-vh-100 d-flex align-items-center justify-content-center bg-light">
    <div class="card shadow-lg" style="width: 100%; max-width: 400px;">
        <div class="card-body p-4">
            <div class="text-center mb-4">
                <h2 class="fw-bold text-primary">Register</h2>
                <p class="text-muted">Create your account</p>
            </div>

            <EditForm Model="@FormModel" OnValidSubmit="@HandleRegister" FormName="RegisterForm">
                <DataAnnotationsValidator />
                
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        @ErrorMessage
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(SuccessMessage))
                {
                    <div class="alert alert-success" role="alert">
                        <i class="fas fa-check-circle me-2"></i>
                        @SuccessMessage
                    </div>
                }

                <div class="mb-3">
                    <label for="name" class="form-label fw-semibold">
                        <i class="fas fa-user me-2"></i>Full Name
                    </label>
                    <InputText @bind-Value="FormModel.Name" class="form-control" id="name" placeholder="Enter your full name" />
                    <ValidationMessage For="@(() => FormModel.Name)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label fw-semibold">
                        <i class="fas fa-envelope me-2"></i>Email Address
                    </label>
                    <InputText @bind-Value="FormModel.Email" class="form-control" id="email" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => FormModel.Email)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label fw-semibold">
                        <i class="fas fa-lock me-2"></i>Password
                    </label>
                    <InputText @bind-Value="FormModel.Password" type="password" class="form-control" id="password" placeholder="Enter your password" />
                    <ValidationMessage For="@(() => FormModel.Password)" class="text-danger small" />
                </div>

                <div class="mb-4">
                    <label for="confirmPassword" class="form-label fw-semibold">
                        <i class="fas fa-lock me-2"></i>Confirm Password
                    </label>
                    <InputText @bind-Value="FormModel.ConfirmPassword" type="password" class="form-control" id="confirmPassword" placeholder="Confirm your password" />
                    <ValidationMessage For="@(() => FormModel.ConfirmPassword)" class="text-danger small" />
                </div>

                <button type="submit" class="btn btn-primary w-100 py-2 fw-semibold" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <text>Creating Account...</text>
                    }
                    else
                    {
                        <i class="fas fa-user-plus me-2"></i>
                        <text>Create Account</text>
                    }
                </button>
            </EditForm>

            <div class="text-center mt-3">
                <p class="text-muted mb-0">
                    Already have an account? 
                    <a href="/login" class="text-primary text-decoration-none fw-semibold">Sign In</a>
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public RegisterRequest FormModel { get; set; } = new RegisterRequest();
    
    public bool IsLoading { get; set; }
    public string ErrorMessage { get; set; } = string.Empty;
    public string SuccessMessage { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        FormModel ??= new RegisterRequest();
    }

    private async Task HandleRegister()
    {
        IsLoading = true;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Check if email already exists
            var existingUser = await DbContext.Users
                .FirstOrDefaultAsync(u => u.Email == FormModel.Email);
            
            if (existingUser != null)
            {
                ErrorMessage = "Email already exists. Please use a different email.";
                return;
            }

            // Create new user
            var user = new User
            {
                Email = FormModel.Email,
                Name = FormModel.Name,
                PasswordHash = AuthService.HashPassword(FormModel.Password),
                IsActive = true,
                CreatedAt = DateTime.UtcNow
            };

            DbContext.Users.Add(user);
            await DbContext.SaveChangesAsync();

            SuccessMessage = "Account created successfully! Redirecting to login...";
            StateHasChanged();

            // Redirect to login after 2 seconds
            await Task.Delay(2000);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred while creating your account. Please try again.";
            Console.WriteLine($"Registration error: {ex.Message}");
        }
        finally
        {
        IsLoading = false;
        StateHasChanged();
        }
    }
}